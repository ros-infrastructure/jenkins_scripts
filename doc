#!/usr/bin/env python
import os
import sys
import urllib2
import datetime
import shutil
from common import get_ros_env, call, check_output, BuildException
from doc_stack import document_repo


def install_catkin_basic(ros_distro):
    catkin_basic_url = 'https://raw.github.com/ros-infrastructure/catkin_basic/master/opt/ros/groovy/share/catkin_basic/cmake/catkin_basicConfig.cmake'
    try:
        web_file = urllib2.urlopen(catkin_basic_url)
        install_dir = "/opt/ros/%s/share/catkin_basic/cmake" % ros_distro
        if not os.path.exists(install_dir):
            os.makedirs(install_dir)
        with open(os.path.join(install_dir, 'catkin_basicConfig.cmake'), 'wb+') as f:
            f.write(web_file.read())
    except Exception as e:
        print "Error: %s" % e
        raise BuildException("Could not install catkin_basic. %s" % e)
    print "Installed catkin_basic"


#TODO: Eventually, pull rosdoc lite from debs
def install_rosdoc_lite(workspace, ros_distro):
    checkout_path = "%s/rosdoc_lite" % workspace
    if os.path.exists(checkout_path):
        shutil.rmtree(checkout_path)

    call("git clone git://github.com/ros-infrastructure/rosdoc_lite.git %s" % checkout_path)
    old_dir = os.getcwd()
    os.chdir("rosdoc_lite")
    branch = 'groovy-devel' if ros_distro != 'fuerte' else 'fuerte-devel'
    call("git checkout %s" % branch)
    rev = check_output("git rev-parse HEAD").split('\n')[0]
    os.makedirs("build")
    os.chdir("build")
    ros_env = get_ros_env('/opt/ros/%s/setup.bash' % ros_distro)
    call("cmake ..", ros_env)
    call("make", ros_env)
    call("make install", ros_env)
    os.chdir(old_dir)
    return rev


def install_catkin_sphinx(workspace):
    checkout_path = "%s/catkin_sphinx" % workspace
    sphinx_path = os.path.abspath("%s/sphinx" % os.environ['HOME'])
    if os.path.exists(checkout_path):
        shutil.rmtree(checkout_path)

    if not os.path.exists(sphinx_path):
        os.makedirs(sphinx_path)

    call("git clone git://github.com/ros/catkin-sphinx.git %s" % checkout_path)
    old_dir = os.getcwd()
    os.chdir("%s" % checkout_path)
    call("./setup.py install")
    os.chdir(old_dir)
    #print "Copying themes to %s" % sphinx_path
    #shutil.copytree(os.path.join(checkout_path, 'theme', 'ros-theme'), os.path.join(sphinx_path, 'ros-theme'))


def get_jenkins_scripts_version(workspace):
    old_dir = os.getcwd()
    os.chdir(os.path.join(workspace, 'jenkins_scripts'))
    rev = check_output("git rev-parse HEAD").split('\n')[0]
    os.chdir(old_dir)
    return rev


def main():
    print
    print
    print
    print "============================================================"
    print "==== Begin doc script.  Ignore the output above ====="
    print "============================================================"
    print
    print
    print

    arguments = sys.argv[1:]
    if len(arguments) != 2:
        print "Usage: ./doc [distro] [stack]"
        raise BuildException("Wrong number of parameters for doc script")

    ros_distro = arguments[0]
    stack = arguments[1]
    print "Working on distro %s and stack %s" % (ros_distro, stack)

    workspace = os.environ['WORKSPACE']
    docspace = os.path.join(workspace, 'doc_stacks', str(datetime.datetime.now()).replace(' ', '_').replace(':', '-'))
    os.makedirs(docspace)

    #Add ros to apt
    print "Add ROS to apt sources"
    with open('/etc/apt/sources.list.d/ros-latest.list', 'w') as f:
        #TODO, perhaps this should move away from shadow fixed, also hack for electric
        if ros_distro == 'electric':
            f.write("deb http://packages.ros.org/ros/ubuntu %s main" % os.environ['OS_PLATFORM'])
        else:
            f.write("deb http://packages.ros.org/ros-shadow-fixed/ubuntu %s main" % os.environ['OS_PLATFORM'])
    call("wget http://packages.ros.org/ros.key -O %s/ros.key" % workspace)
    call("apt-key add %s/ros.key" % workspace)
    call("apt-get update")

    print "Installing lsb-release and pkg-config"
    call("apt-get install pkg-config lsb-release --yes")

    # install vcs tools
    print "Installing vcs tools..."
    call("apt-get install mercurial --yes")
    call("apt-get install git-core --yes")
    call("apt-get install subversion --yes")

    call("apt-get install rsync --yes")

    #install ssh
    call("apt-get install openssh-client --yes")

    print "Installing catkin-sphinx"
    #TODO: Switch to apt for catkin-sphinx
    install_catkin_sphinx(workspace)
    print "Done installing catkin-sphinx"

    #Install rosdoc lite
    print "Installing ros and rosdoc_lite..."
    #TODO Hack for electric
    if ros_distro == 'electric' or os.environ['OS_PLATFORM'] == 'lucid':
        call("apt-get install python-pip python-setuptools build-essential --yes")
        call("pip install kitchen")
    else:
        call("apt-get install python-kitchen --yes")
    call("apt-get install python-catkin-pkg python-rospkg python-networkx python-rosinstall python-rosdistro --yes")

    #TODO: Hack to install fuerte tools to document electric
    install_distro = ros_distro if ros_distro != 'electric' else 'fuerte'
    call("apt-get install ros-%s-ros ros-%s-genmsg --yes" % (install_distro, install_distro))

    #TODO: Replace with commented line below
    call("apt-get install graphviz python-sphinx python-yaml doxygen python-epydoc --yes")
    #TODO: Put back in
    #call("apt-get install ros-%s-rosdoc-lite --yes" % ros_distro)
    install_catkin_basic(install_distro)
    rosdoc_lite_version = install_rosdoc_lite(workspace, install_distro)
    print "Done installing ros and rosdoc_lite"

    jenkins_scripts_version = get_jenkins_scripts_version(workspace)

    print "rosdoc_lite version: %s" % rosdoc_lite_version
    print "jenkins_scripts version: %s" % jenkins_scripts_version

    #Run documentation generation on the stack
    homepage = 'http://ros.org/doc'
    document_repo(workspace, docspace, ros_distro, stack,
                  os.environ['OS_PLATFORM'], os.environ['ARCH'],
                  homepage, rosdoc_lite_version, jenkins_scripts_version)


if __name__ == '__main__':
    main()
