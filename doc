#!/usr/bin/env python
import argparse
import os
import sys
import urllib2
import datetime
import shutil
from common import get_ros_env, call, check_output, BuildException
from doc_stack import document_necessary, document_repo


def install_catkin_basic(ros_distro):
    catkin_basic_url = 'https://raw.github.com/ros-infrastructure/catkin_basic/master/opt/ros/groovy/share/catkin_basic/cmake/catkin_basicConfig.cmake'
    try:
        web_file = urllib2.urlopen(catkin_basic_url)
        install_dir = "/opt/ros/%s/share/catkin_basic/cmake" % ros_distro
        if not os.path.exists(install_dir):
            os.makedirs(install_dir)
        with open(os.path.join(install_dir, 'catkin_basicConfig.cmake'), 'wb+') as f:
            f.write(web_file.read())
    except Exception as e:
        print "Error: %s" % e
        raise BuildException("Could not install catkin_basic. %s" % e)
    print "Installed catkin_basic"


#TODO: Eventually, pull rosdoc lite from debs
def checkout_rosdoc_lite(workspace, ros_distro, no_chroot=False):
    checkout_path = "%s/rosdoc_lite" % workspace
    if os.path.exists(checkout_path):
        shutil.rmtree(checkout_path)

    call("git clone git://github.com/ros-infrastructure/rosdoc_lite.git %s" % checkout_path)
    old_dir = os.getcwd()
    os.chdir(checkout_path)
    special_branch = {'fuerte': 'fuerte-devel'}
    if ros_distro in special_branch:
        call("git checkout %s" % special_branch[ros_distro])
    rev = check_output("git rev-parse HEAD").split('\n')[0]
    os.chdir(old_dir)
    return rev

def install_rosdoc_lite(workspace, ros_distro):
    checkout_path = "%s/rosdoc_lite" % workspace
    old_dir = os.getcwd()
    os.chdir(checkout_path)
    os.makedirs("build")
    os.chdir("build")
    ros_env = get_ros_env('/opt/ros/%s/setup.bash' % ros_distro)
    call("cmake ..", ros_env)
    call("make", ros_env)
    call("make install", ros_env)
    os.chdir(old_dir)


def install_catkin_sphinx(workspace):
    checkout_path = "%s/catkin_sphinx" % workspace
    sphinx_path = os.path.abspath("%s/sphinx" % os.environ['HOME'])
    if os.path.exists(checkout_path):
        shutil.rmtree(checkout_path)

    if not os.path.exists(sphinx_path):
        os.makedirs(sphinx_path)

    call("git clone git://github.com/ros-infrastructure/catkin-sphinx.git %s" % checkout_path)
    old_dir = os.getcwd()
    os.chdir("%s" % checkout_path)
    call("./setup.py install")
    os.chdir(old_dir)
    #print "Copying themes to %s" % sphinx_path
    #shutil.copytree(os.path.join(checkout_path, 'theme', 'ros-theme'), os.path.join(sphinx_path, 'ros-theme'))


def get_jenkins_scripts_version(workspace, no_chroot=False):
    if not no_chroot:
        old_dir = os.getcwd()
        os.chdir(os.path.join(workspace, 'jenkins_scripts'))
    rev = check_output("git rev-parse HEAD").split('\n')[0]
    if not no_chroot:
        os.chdir(old_dir)
    return rev


def main():
    platform = os.environ.get('OS_PLATFORM', None)
    arch = os.environ.get('ARCH', None)

    parser = argparse.ArgumentParser(description='Doc')
    parser.add_argument('rosdistro', help='The ROS distro')
    parser.add_argument('repo', help='The repository or stack name')
    parser.add_argument('--platform', default=platform, required=platform is None, help="The OS platform, e.g. 'precise' (default: environment variable OS_PLATFORM if defined)")
    parser.add_argument('--arch', default=arch, required=arch is None, help="The architecture, e.g. 'amd64' (default: environment variable ARCH if defined)")
    parser.add_argument('--no-chroot', action='store_true', help='Skip all installations and setup steps to run the script locally without sudo')
    parser.add_argument('--skip-garbage', action='store_true', help='Skip deleting all generated doc files')
    parser.add_argument('--force', action='store_true', help='Force generating documentation even when the upstream has not changed')
    args = parser.parse_args()

    # no chroot implies keeping all generated artifacts
    if args.no_chroot:
        args.skip_garbage = True

    print
    print
    print
    print "============================================================"
    print "==== Begin doc script.  Ignore the output above ====="
    print "============================================================"
    print
    print
    print

    print "Working on distro %s and repo/stack %s" % (args.rosdistro, args.repo)

    workspace = os.environ['WORKSPACE']
    docspace = os.path.join(workspace, 'doc_stacks', str(datetime.datetime.now()).replace(' ', '_').replace(':', '-'))
    os.makedirs(docspace)

    try:
        doit(args.rosdistro, args.repo, workspace, docspace, args.platform, args.arch, args.no_chroot, args.skip_garbage, args.force)
    finally:
        if not args.skip_garbage:
            shutil.rmtree(docspace)


def doit(ros_distro, stack, workspace, docspace, platform, arch, no_chroot=False, skip_garbage=False, force=False):
    if not no_chroot:
        #Add ros to apt
        print "Add ROS to apt sources"
        with open('/etc/apt/sources.list.d/ros-latest.list', 'w') as f:
            #TODO, perhaps this should move away from shadow fixed, also hack for electric
            if ros_distro == 'electric':
                f.write("deb http://packages.ros.org/ros/ubuntu %s main" % os.environ['OS_PLATFORM'])
            else:
                f.write("deb http://packages.ros.org/ros-shadow-fixed/ubuntu %s main" % os.environ['OS_PLATFORM'])
        call("wget http://packages.ros.org/ros.key -O %s/ros.key" % workspace)
        call("apt-key add %s/ros.key" % workspace)
        call("apt-get update")

        call("apt-get install python-rosdistro python-rosinstall --yes")

    #TODO: Hack to install fuerte tools to document electric
    install_distro = ros_distro if ros_distro != 'electric' else 'fuerte'
    rosdoc_lite_version = checkout_rosdoc_lite(workspace, install_distro, no_chroot=no_chroot)
    print "Done checking out rosdoc_lite"

    jenkins_scripts_version = get_jenkins_scripts_version(workspace, no_chroot=no_chroot)

    print "rosdoc_lite version: %s" % rosdoc_lite_version
    print "jenkins_scripts version: %s" % jenkins_scripts_version

    test_result_path = os.path.join(workspace, 'test_results')
    if os.path.exists(test_result_path):
        shutil.rmtree(test_result_path)

    necessary = document_necessary(workspace, docspace, ros_distro, stack,
                                   rosdoc_lite_version, jenkins_scripts_version, force)
    if not necessary:
        return

    if not no_chroot:
        print "Installing lsb-release and pkg-config"
        call("apt-get install pkg-config lsb-release --yes")

        # install vcs tools
        print "Installing vcs tools..."
        call("apt-get install mercurial --yes")
        call("apt-get install git-core --yes")
        call("apt-get install subversion --yes")

        call("apt-get install rsync --yes")

        #install ssh
        call("apt-get install openssh-client --yes")

        print "Installing catkin-sphinx"
        #TODO: Switch to apt for catkin-sphinx
        install_catkin_sphinx(workspace)
        print "Done installing catkin-sphinx"

        print "Installing ros and genmsg"
        call("apt-get install ros-%s-ros ros-%s-genmsg --yes" % (install_distro, install_distro))

        #Install rosdoc lite
        print "Installing rosdoc_lite"
        install_rosdoc_lite(workspace, install_distro)
        #TODO Hack for electric
        if ros_distro == 'electric' or os.environ['OS_PLATFORM'] == 'lucid':
            call("apt-get install python-pip python-setuptools build-essential --yes")
            call("pip install kitchen")
        else:
            call("apt-get install python-kitchen --yes")
        call("apt-get install python-catkin-pkg python-docutils python-rospkg python-networkx --yes")

        #TODO: Replace with commented line below
        call("apt-get install graphviz python-sphinx python-yaml doxygen python-epydoc --yes")
        #TODO: Put back in
        #call("apt-get install ros-%s-rosdoc-lite --yes" % ros_distro)
        install_catkin_basic(install_distro)
        print "Done installing ros"

    #Run documentation generation on the stack
    homepage = 'http://docs.ros.org'
    document_repo(workspace, docspace, ros_distro, stack,
                  platform, arch,
                  homepage, no_chroot, skip_garbage, **necessary)


if __name__ == '__main__':
    main()
